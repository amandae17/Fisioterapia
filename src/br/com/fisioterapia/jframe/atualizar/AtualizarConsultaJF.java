package br.com.fisioterapia.jframe.atualizar;

import br.com.fisioterapia.database.consulta.Consulta;
import br.com.fisioterapia.database.pessoas.Paciente;
import br.com.fisioterapia.database.pessoas.Fisioterapeuta;
import java.beans.PropertyVetoException;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
/**
 *
 * @author Icaro
 */
public class AtualizarConsultaJF extends javax.swing.JInternalFrame {

    private static int codConsulta;

    public static int getCodConsulta() {
        return codConsulta;
    }

    public static void setCodConsulta(int codConsulta) {
        AtualizarConsultaJF.codConsulta = codConsulta;
    }

    /**
     * Creates new form AtualizarConsultaJF1
     */
    public AtualizarConsultaJF() {
        initComponents();
        try {
            this.setMaximum(true);
        } catch (PropertyVetoException p) {
            lblSaida.setText("Ocorreu um erro ao maximizar o JInternal Frame");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTituloPaciente = new javax.swing.JLabel();
        lblHorario = new javax.swing.JLabel();
        btnAtualizar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        txtHorario = new javax.swing.JFormattedTextField();
        txtCpfPaciente = new javax.swing.JFormattedTextField();
        lblData = new javax.swing.JLabel();
        txtData = new javax.swing.JFormattedTextField();
        lblSaida = new javax.swing.JLabel();
        lblTituloFisioterapeuta = new javax.swing.JLabel();
        txtCpfFisioterapeuta = new javax.swing.JFormattedTextField();
        lblBuscarHorario = new javax.swing.JLabel();
        txtBuscarHorario = new javax.swing.JFormattedTextField();
        lblBuscarData = new javax.swing.JLabel();
        txtBuscarData = new javax.swing.JFormattedTextField();
        lblPaciente = new javax.swing.JLabel();
        lblFisioterapeuta = new javax.swing.JLabel();
        lblNomePaciente = new javax.swing.JLabel();
        lblNomeFisioterapeuta = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Atualizar Consultas");
        setPreferredSize(new java.awt.Dimension(560, 538));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                zerarVariaveis(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(null);

        lblTituloPaciente.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblTituloPaciente.setText("CPF do Paciente:");
        getContentPane().add(lblTituloPaciente);
        lblTituloPaciente.setBounds(20, 190, 113, 30);

        lblHorario.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblHorario.setText("Horário:");
        getContentPane().add(lblHorario);
        lblHorario.setBounds(30, 360, 61, 41);

        btnAtualizar.setText("Atualizar");
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });
        getContentPane().add(btnAtualizar);
        btnAtualizar.setBounds(200, 420, 108, 30);

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        getContentPane().add(btnBuscar);
        btnBuscar.setBounds(180, 120, 80, 30);

        try {
            txtHorario.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtHorario.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtHorario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHorarioActionPerformed(evt);
            }
        });
        getContentPane().add(txtHorario);
        txtHorario.setBounds(120, 360, 80, 40);

        try {
            txtCpfPaciente.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtCpfPaciente.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCpfPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCpfPacienteActionPerformed(evt);
            }
        });
        getContentPane().add(txtCpfPaciente);
        txtCpfPaciente.setBounds(170, 190, 120, 30);

        lblData.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblData.setText("Data :");
        getContentPane().add(lblData);
        lblData.setBounds(30, 310, 50, 41);

        try {
            txtData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtData.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDataActionPerformed(evt);
            }
        });
        getContentPane().add(txtData);
        txtData.setBounds(110, 320, 90, 30);
        getContentPane().add(lblSaida);
        lblSaida.setBounds(100, 470, 350, 20);

        lblTituloFisioterapeuta.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblTituloFisioterapeuta.setText("CPF do Fisioterapeuta:");
        getContentPane().add(lblTituloFisioterapeuta);
        lblTituloFisioterapeuta.setBounds(20, 270, 150, 30);

        try {
            txtCpfFisioterapeuta.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtCpfFisioterapeuta.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCpfFisioterapeuta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCpfFisioterapeutaActionPerformed(evt);
            }
        });
        getContentPane().add(txtCpfFisioterapeuta);
        txtCpfFisioterapeuta.setBounds(170, 270, 120, 30);

        lblBuscarHorario.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblBuscarHorario.setText("Horário:");
        getContentPane().add(lblBuscarHorario);
        lblBuscarHorario.setBounds(20, 60, 61, 41);

        try {
            txtBuscarHorario.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtBuscarHorario.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtBuscarHorario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarHorarioActionPerformed(evt);
            }
        });
        getContentPane().add(txtBuscarHorario);
        txtBuscarHorario.setBounds(110, 60, 80, 40);

        lblBuscarData.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblBuscarData.setText("Data :");
        getContentPane().add(lblBuscarData);
        lblBuscarData.setBounds(20, 10, 50, 41);

        try {
            txtBuscarData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtBuscarData.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtBuscarData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarDataActionPerformed(evt);
            }
        });
        getContentPane().add(txtBuscarData);
        txtBuscarData.setBounds(100, 10, 90, 30);

        lblPaciente.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        getContentPane().add(lblPaciente);
        lblPaciente.setBounds(290, 190, 250, 30);

        lblFisioterapeuta.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        getContentPane().add(lblFisioterapeuta);
        lblFisioterapeuta.setBounds(290, 270, 250, 30);

        lblNomePaciente.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblNomePaciente.setText("Paciente:");
        getContentPane().add(lblNomePaciente);
        lblNomePaciente.setBounds(300, 160, 113, 30);

        lblNomeFisioterapeuta.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblNomeFisioterapeuta.setText("Fisioterapeuta:");
        getContentPane().add(lblNomeFisioterapeuta);
        lblNomeFisioterapeuta.setBounds(300, 240, 113, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        LocalDate dataConsulta;
        Duration duracao;
        long diferencaData;

        String t1 = txtBuscarHorario.getText();
        LocalTime horarioConsulta;
        try {
            dataConsulta = LocalDate.parse(txtBuscarData.getText(), DateTimeFormatter.ofPattern("dd/MM/uuuu"));
            duracao = Duration.between(LocalDate.now().atStartOfDay(), dataConsulta.atStartOfDay());
            diferencaData = duracao.toDays(); // Se for zero ou negativo, a data digitada é errada.
            if (diferencaData > 0) {
                try {
                    horarioConsulta = LocalTime.parse(t1);
                    Consulta c1 = new Consulta(dataConsulta, horarioConsulta);
                    if (c1.verificarConsulta()) {//Método para verificar se já existe consulta marcada nesse horário
                        c1 = Consulta.buscarConsulta(dataConsulta, horarioConsulta);
                        Paciente p1 = Paciente.buscarPacienteId(c1.getCodPessoa());
                        Fisioterapeuta f1 = Fisioterapeuta.buscarFisioterapeutaId(c1.getCodFisioterapeuta());

                        txtCpfPaciente.setText(String.valueOf(p1.getCpf()));
                        lblPaciente.setText(p1.getNome());
                        txtCpfFisioterapeuta.setText(String.valueOf(f1.getCpf()));
                        lblFisioterapeuta.setText(f1.getNome());

                        txtData.setText(dataConsulta.format(DateTimeFormatter.ofPattern("dd/MM/yyyy")));

                        txtHorario.setText(horarioConsulta.toString());
                        AtualizarConsultaJF.setCodConsulta(c1.getIdConsulta());
                        lblSaida.setText("Consulta encontrada");
                    } else {
                        lblSaida.setText("Não existe uma consulta marcada nesse dia e horário.");
                    }
                } catch (DateTimeParseException e) {
                    lblSaida.setText("Horário inválido");
                }
            } else {
                lblSaida.setText("Data inválida");
            }
        } catch (DateTimeParseException e) {
            lblSaida.setText("Data inválida");
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void txtCpfPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCpfPacienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCpfPacienteActionPerformed

    private void txtHorarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHorarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHorarioActionPerformed

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed

        LocalDate dataConsulta;
        Duration duracao;
        long diferencaData;

        String t1 = txtHorario.getText();
        LocalTime horarioConsulta;

        if (AtualizarConsultaJF.getCodConsulta() > 0) {
            try {
                dataConsulta = LocalDate.parse(txtData.getText(), DateTimeFormatter.ofPattern("dd/MM/uuuu"));
                duracao = Duration.between(LocalDate.now().atStartOfDay(), dataConsulta.atStartOfDay());
                diferencaData = duracao.toDays(); // Se for zero ou negativo, a data digitada é errada.
                if (diferencaData > 0) {
                    try {
                        horarioConsulta = LocalTime.parse(t1);
                        Consulta c1 = new Consulta(dataConsulta, horarioConsulta);
                        c1.setIdConsulta(AtualizarConsultaJF.getCodConsulta());
                        if (!c1.verificarConsulta() || c1.verificarConsultaIsSameDate()) {//Método para verificar se já existe consulta marcada nesse horário

                            String[] cpfPaciente1 = txtCpfPaciente.getText().split("-");
                            String[] cpfPaciente2 = cpfPaciente1[0].split("\\.");
                            String testeCpfPaciente = cpfPaciente2[0] + cpfPaciente2[1] + cpfPaciente2[2] + cpfPaciente1[1];
                            long cpfPaciente;

                            String[] cpfFisioterapeuta1 = txtCpfFisioterapeuta.getText().split("-");
                            String[] cpfFisioterapeuta2 = cpfFisioterapeuta1[0].split("\\.");
                            String testeCpfFisioterapeuta = cpfFisioterapeuta2[0] + cpfFisioterapeuta2[1] + cpfFisioterapeuta2[2] + cpfFisioterapeuta1[1];
                            long cpfFisioterapeuta;

                            if (!testeCpfPaciente.isBlank() && !testeCpfFisioterapeuta.isBlank()) {
                                cpfPaciente = Long.parseLong(testeCpfPaciente);
                                cpfFisioterapeuta = Long.parseLong(testeCpfFisioterapeuta);
                                Paciente p1 = new Paciente(cpfPaciente);

                                if (p1.verificarCpf()) {
                                    p1 = Paciente.BuscarPaciente(cpfPaciente);
                                    Fisioterapeuta f1 = new Fisioterapeuta(cpfFisioterapeuta);
                                    if (f1.verificarFisioterapeuta()) {
                                        f1 = Fisioterapeuta.buscarFisioterapeuta(cpfFisioterapeuta);

                                        c1.setCodPessoa(p1.getCodPessoa());
                                        c1.setCodFisioterapeuta(f1.getCodFisioterapeuta());
                                        c1.updateConsulta();
                                        AtualizarConsultaJF.setCodConsulta(0);
                                    } else {
                                        lblSaida.setText("Fisioterapeuta não encontrado");
                                    }
                                } else {
                                    lblSaida.setText("Paciente não encontrado");
                                }
                            } else {
                                lblSaida.setText("Campos em branco");
                            }

                            lblSaida.setText("Consulta atualizada com sucesso");
                        } else {
                            lblSaida.setText("Já existe uma consulta marcada nesse mesmo dia e horário.");
                        }
                    } catch (DateTimeParseException e) {
                        lblSaida.setText("Horário inválido");
                    }
                } else {
                    lblSaida.setText("Data inválida");
                }
            } catch (DateTimeParseException e) {
                lblSaida.setText("Data inválida");
            }

        } else {
            lblSaida.setText("Busque uma consulta primeiro.");
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_btnAtualizarActionPerformed

    private void txtDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDataActionPerformed

    private void txtCpfFisioterapeutaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCpfFisioterapeutaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCpfFisioterapeutaActionPerformed

    private void txtBuscarHorarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarHorarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuscarHorarioActionPerformed

    private void txtBuscarDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarDataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuscarDataActionPerformed

    private void zerarVariaveis(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_zerarVariaveis
        AtualizarConsultaJF.setCodConsulta(0);

        // TODO add your handling code here:
    }//GEN-LAST:event_zerarVariaveis


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JLabel lblBuscarData;
    private javax.swing.JLabel lblBuscarHorario;
    private javax.swing.JLabel lblData;
    private javax.swing.JLabel lblFisioterapeuta;
    private javax.swing.JLabel lblHorario;
    private javax.swing.JLabel lblNomeFisioterapeuta;
    private javax.swing.JLabel lblNomePaciente;
    private javax.swing.JLabel lblPaciente;
    private javax.swing.JLabel lblSaida;
    private javax.swing.JLabel lblTituloFisioterapeuta;
    private javax.swing.JLabel lblTituloPaciente;
    private javax.swing.JFormattedTextField txtBuscarData;
    private javax.swing.JFormattedTextField txtBuscarHorario;
    private javax.swing.JFormattedTextField txtCpfFisioterapeuta;
    private javax.swing.JFormattedTextField txtCpfPaciente;
    private javax.swing.JFormattedTextField txtData;
    private javax.swing.JFormattedTextField txtHorario;
    // End of variables declaration//GEN-END:variables
}
